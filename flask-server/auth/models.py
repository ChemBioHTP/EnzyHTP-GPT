#! python3
# -*- encoding: utf-8 -*-
'''
@File    :   models.py
@Created :   2023/10/21 21:29
@Author  :   Zhong, Yinjie
@Version :   1.0
@Contact :   yinjie.zhong@vanderbilt.edu
'''

# Here put the import lib.
from flask_login import UserMixin
from context import db
import uuid
from datetime import datetime

def generate_password_hash(password_plaintext: str) -> str:
    """Encrypt the password with SHA256.

    Args:
        password_plaintext: Plaintext Password.
    
    Returns:
        password: Encrypted Password.
    """
    from hashlib import sha256
    password = sha256(password_plaintext.encode('utf-8')).hexdigest().lower()
    return password

class User(db.Model, UserMixin):
    """User Model: User Information.

    Attributes:
        id (str): Identity generated by UUID4.
        email (str): Email address of the user.
        password (str): Password hashed with SHA256.
        registered_on (datetime): The time when the user is registered.
        admin (bool): The flag showing if the user is an admin.
    """
    __tablename__ = "users"
    id = db.Column(db.String(36), primary_key=True, unique=True)
    email = db.Column(db.String(255), nullable=False, unique=True)
    password = db.Column(db.String(64), nullable=False)
    registered_on = db.Column(db.DateTime, nullable=False)
    admin = db.Column(db.Boolean, nullable=False, default=False)

    def __init__(self, email: str, password: str, admin: bool = False) -> None:
        """Initialize a new UserModel class.

        Args:
            email: Email address of the user.
            password: Password submitted from the user.
        """
        self.id = str(uuid.uuid4())
        self.email = email
        self.password = generate_password_hash(password)
        self.registered_on = datetime.utcnow()
        self.admin = admin
        return

    # def __init__(self) -> None:
    #     """Initialize an empty UserModel class."""
    #     return
    
    def set_password(self, password: str) -> None:
        """Reset password.
        
        Args:
            self: Current instance.
            password: Password submitted from the user.
        """
        self.password = generate_password_hash(password)
        return
    
    def validate_password(self, password: str) -> bool:
        """Check password.
        
        Args:
            self: Current instance.
            password: Password submitted from the user.
        """
        is_password_identical = (self.password == generate_password_hash(password))
        return is_password_identical
    
    def get_id(self) -> str:
        """Get the ID of current user.
        
        Returns:
            The id of current user.
        """
        return self.id
    
    @staticmethod
    def get(id: str):
        """Get user instance.
        
        Args:
            id: The `id` to identify a user.
        """
        user = User.query.filter_by(id=id).first()
        if (user):
            return user
        else:
            return None


if __name__ == '__main__':
    user = User('y.z@vu', '123456')
    print(user.email)
    print(user.password)

# Reference: https://www.askpython.com/python-modules/flask/flask-user-authentication