#! python3
# -*- encoding: utf-8 -*-
'''
@File    :   models.py
@Created :   2023/10/21 21:29
@Author  :   Zhong, Yinjie
@Version :   1.0
@Contact :   yinjie.zhong@vanderbilt.edu
'''

# Here put the import lib.
from __future__ import annotations  # To enable the annotation that a staticmethod of a class returns an instance of the class.
from flask_login import UserMixin
from context import db
import uuid
from datetime import datetime

class User(db.Model, UserMixin):
    """User Model: User Information.

    Attributes:
        id (str): Identity generated by UUID4.
        email (str): Email address of the user.
        password (str): Password hashed with SHA256.
        username (str): The username.
        registered_on (datetime): The time when the user is registered.
        admin (bool): The flag showing if the user is an admin.
    """
    __tablename__ = "users"
    id = db.Column(db.String(36), primary_key=True, unique=True)
    email = db.Column(db.String(255), nullable=False, unique=True)
    password = db.Column(db.String(64), nullable=False)
    username = db.Column(db.String(64), nullable=True)
    registered_on = db.Column(db.DateTime, nullable=False)
    admin = db.Column(db.Boolean, nullable=False, default=False)
    is_active = db.Column(db.Boolean, nullable=False, default=True)

    @staticmethod
    def check_username(username: str) -> bool:
        """Check if the username is legal.
        
        Args:
            username: The username to set.

        Returns:
            If the username passes the check.
        """
        username = username.replace(' ', '')
        if (len(username) >= 2):
            return True
        else:
            return False

    @staticmethod
    def __generate_password_hash(password_plaintext: str) -> str:
        """Encrypt the password with SHA256.

        Args:
            password_plaintext: Plaintext Password.
        
        Returns:
            password: Encrypted Password.
        """
        from hashlib import sha256
        password = sha256(password_plaintext.encode('utf-8')).hexdigest().lower()
        return password

    @staticmethod
    def get(id: str) -> User | None:
        """Get user instance.
        
        Args:
            id: The `id` to identify a user.
        """
        user = User.query.filter_by(id=id).first()
        if (user):
            return user
        else:
            return None
        
    @staticmethod
    def get_by_email(email: str) -> User | None:
        """Search for `User` instance by email.
        
        Args:
            email: User email.
        
        Returns:
            `User` instance with matched email address.
        """
        user = User.query.filter_by(email=email).first()
        if (user):
            return user
        else:
            return None
    
    def __init__(self, email: str, password: str, username: str = '', admin: bool = False) -> None:
        """Initialize a new UserModel class.

        Args:
            email: Email address of the user.
            password: Password submitted from the user.
            username: The username.
            admin: If this user is an admin user (Default: False).
        """
        self.id = str(uuid.uuid4())
        self.email = email
        self.password = User.__generate_password_hash(password)
        if (User.check_username(username)):  # Do when a legal username is given.
            self.username = username
        elif (email.count('@') > 0):    # Do when the user has no username but has a regular email address.
            self.username = email.split('@')[0]
        else:
            self.username = email       # Do when the user doesn't either provide a username or have a regular email address.
        self.registered_on = datetime.utcnow()
        self.admin = admin
        return
    
    def set_password(self, password: str) -> None:
        """Reset password.
        
        Args:
            self: Current instance.
            password: Password submitted from the user.
        """
        self.password = User.__generate_password_hash(password)
        return
    
    def verify_password(self, password: str) -> bool:
        """Verify password.
        
        Args:
            self: Current instance.
            password: Password submitted from the user.
        """
        is_password_identical = (self.password == User.__generate_password_hash(password))
        return is_password_identical

    def set_username(self, username: str) -> bool:
        """Set username.
        
        Args:
            self: Current instance.
            username: The new username to set.

        Returns:
            If the username is set or renewed.
        """
        if (User.check_username(username)):
            self.username = username
            return True
        else:
            return False
        

    def get_id(self) -> str:
        """Get the ID of current user.
        
        Returns:
            The id of current user.
        """
        return self.id

class OAuthUser(db.Model):
    """User from Social Login.
    
    Attributes:
        id (str): OAuth Account ID generated by UUID4.
        email (str): Email address of the oauth user.
        oauth_vendor (str): OAuth Vendor, e.g. Google, Microsoft, etc.
        registered_on (datetime): The time when the user is registered.
        user_id: The user ID (of `users` table) to which it is bound.

    """
    __tablename__ = "oauth_users"
    id = db.Column(db.String(36), primary_key=True, unique=True)
    email = db.Column(db.String(255), nullable=False, unique=True)
    oauth_vendor = db.Column(db.String(64), nullable=False)
    registered_on = db.Column(db.DateTime, nullable=False)
    user_id = db.Column(db.String(36), db.ForeignKey('users.id'), nullable=True)
    user = db.relationship('User', backref=db.backref('oauth_users'))

    @staticmethod
    def camel_case_oauth_vendor(oauth_vendor: str) -> str:
        """Convert the name of OAuth Vendor to camel case  
        (e.g. GOOGLE -> Google, microsoft -> Microsoft).
        
        Args:
            oauth_vendor: OAuth Vendor, e.g. Google, Microsoft, etc.
        
        Returns:
            Camel case OAuth vendor name.
        """
        if (len(oauth_vendor) <= 1):
            return oauth_vendor.upper()
        else:
            return f'{oauth_vendor[0].upper()}{oauth_vendor[1:].lower()}'

    @staticmethod
    def get_by_email_and_vendor(email: str, oauth_vendor: str) -> OAuthUser | None:
        """Search for `OAuthUser` instance by email and vendor.
        
        Args:
            email: User email.
            oauth_vendor: OAuth Vendor, e.g. Google, Microsoft, etc.
        
        Returns:
            `OAuthUser` instance with matched email address and OAuth vendor.
        """
        email = email.lower()
        oauth_vendor = OAuthUser.camel_case_oauth_vendor(oauth_vendor)

        oauth_user = OAuthUser.query.filter(OAuthUser.email==email, OAuthUser.oauth_vendor==oauth_vendor).first()
        if (oauth_user):
            return oauth_user
        else:
            return None

    def __init__(self, email: str, oauth_vendor: str, user_id: str = None) -> None:
        """Initialize a new UserModel class.

        Args:
            email: Email address of the oauth user.
            oauth_vendor: OAuth Vendor, e.g. Google, Microsoft, etc.
            user_id: The user ID (of `users` table) to which it is bound.
        """
        self.id = str(uuid.uuid4())
        self.email = email
        self.oauth_vendor = OAuthUser.camel_case_oauth_vendor(oauth_vendor)
        self.registered_on = datetime.utcnow()
        self.user_id = user_id
        self.user = User.get(user_id)
        return


if __name__ == '__main__':
    user = User('y.z@vu', '123456')
    print(user.email)
    print(user.password)

# Reference: https://www.askpython.com/python-modules/flask/flask-user-authentication